from aiogram import Router, F, types
from create_bot import bot
import asyncio
from database import db_data, cfg_games
from database import check_user
from filters.games import IsSlot, IsDice, IsDarts, IsBowling, IsFootbal, IsBasketball
router = Router()

# –í—ã–∏–≥—Ä—ã—à
async def win(message, rate_money, amount_money, koff, user_id):
    win_money = int(rate_money * koff)
    end_amount_money = win_money + int(amount_money)
    db_data.users.update_one({'user_id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(4)
    await message.reply('–í–∞—à –≤—ã–∏–≥—Ä—ã—à ===> +' + str(
        f'{await num_triadi(win_money)} $'.replace(',', ' ')), parse_mode='HTML')


# –ü—Ä–æ–∏–≥—Ä—ã—à
async def lose(message, amount_money, rate_money, user_id):
    end_amount_money = int(amount_money) - rate_money
    db_data.users.update_one({'user_id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(4)
    await message.reply('–í–∞—à –ø—Ä–æ–∏–≥—Ä—ã—à ===> -' + str(
        f'{await num_triadi(rate_money)} $'.replace(',', ' ')), parse_mode='HTML')


# –í—ã–∏–≥—Ä—ã—à —Å–ª–æ—Ç
async def win_slot(message, rate_money, amount_money, koff, user_id):
    win_money = int(rate_money * koff)
    end_amount_money = win_money + int(amount_money)
    db_data.users.update_one({'user_id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(2)
    await message.reply('–í–∞—à –≤—ã–∏–≥—Ä—ã—à ===> +' + str(
        f'{await num_triadi(win_money)} $'.replace(',', ' ')), parse_mode='HTML')


# –ü—Ä–æ–∏–≥—Ä—ã—à —Å–ª–æ—Ç
async def lose_slot(message, amount_money, rate_money, user_id):
    end_amount_money = int(amount_money) - rate_money
    db_data.users.update_one({'user_id': user_id}, {'$set': {'cash': int(end_amount_money)}})
    await asyncio.sleep(2)
    await message.reply('–í–∞—à –ø—Ä–æ–∏–≥—Ä—ã—à ===> -' + str(
        f'{await num_triadi(rate_money)} $'.replace(',', ' ')), parse_mode='HTML')


# –§—É—Ç–±–æ–ª
@router.message(F.text,IsFootbal())
async def get_game_data(message: types.Message):
    user_id = message.from_user.id
    await check_user(message.from_user.id, message.from_user.username)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = db_data.users.find_one({'user_id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='‚öΩ')
        game_cfg = cfg_games.games.find_one({'name': '—Ñ—É—Ç–±–æ–ª'})
        if amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, game_cfg['first'], user_id)
        elif amount_score.dice.value == 4:
            await win(message, rate_money, amount_money, game_cfg['second'], user_id)
        elif amount_score.dice.value == 3:
            await win(message, rate_money, amount_money, game_cfg['third'], user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await message.reply('–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{await num_triadi(enough_money)} $\n' + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{await num_triadi(amount_money)} $',
                               parse_mode='HTML')

# –ë–∞—Å–∫–µ—Ç–±–æ–ª
@router.message(F.text,IsBasketball())
async def get_game_data(message: types.Message):
    user_id = message.from_user.id
    await check_user(message.from_user.id, message.from_user.username)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = db_data.users.find_one({'user_id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        game_cfg = cfg_games.games.find_one({'name': '–±–∞—Å–∫–µ—Ç–±–æ–ª'})
        amount_score = await bot.send_dice(message.chat.id, emoji='üèÄ')
        if amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, game_cfg['first'], user_id)
        elif amount_score.dice.value == 4:
            await win(message, rate_money, amount_money, game_cfg['second'], user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await message.reply(
            '–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{await num_triadi(enough_money)} $\n' + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{await num_triadi(amount_money)} $',
            parse_mode='HTML')

# –ö–æ—Å—Ç–∏
@router.message(F.text,IsDice())
async def dice(message: types.Message):
    user_id = message.from_user.id
    await check_user(message.from_user.id, message.from_user.username)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    amount_point = text[2]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
    user_info = db_data.users.find_one({'user_id': user_id})
    amount_money = user_info['cash']
    if rate_money <= int(amount_money):
        amount_score = await bot.send_dice(message.chat.id, emoji='üé≤')
        game_cfg = cfg_games.games.find_one({'name': '–∫–æ—Å—Ç–∏'})
        if int(amount_point) == int(amount_score.dice.value):
            await win(message, rate_money, amount_money, game_cfg['first'], user_id)
        elif abs(int(amount_point) - amount_score.dice.value) == 1:
            await win(message, rate_money, amount_money, game_cfg['second'], user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await message.reply(
            '–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{await num_triadi(enough_money)} $\n' + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{await num_triadi(amount_money)} $',
            parse_mode='HTML')

# –î–∞—Ä—Ç—Å
@router.message(F.text,IsDarts())
async def darts(message: types.Message):
    user_id = message.from_user.id
    await check_user(message.from_user.id, message.from_user.username)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = db_data.users.find_one({'user_id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='üéØ')
        game_cfg = cfg_games.games.find_one({'name': '–¥–∞—Ä—Ç—Å'})
        if amount_score.dice.value == 6:
            await win(message, rate_money, amount_money, game_cfg['first'], user_id)
        elif amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, game_cfg['second'], user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await message.reply(
            '–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{await num_triadi(enough_money)} $\n' + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{await num_triadi(amount_money)} $',
            parse_mode='HTML')

# –ë–æ—É–ª–∏–Ω–≥
@router.message(F.text,IsBowling())
async def bowling(message: types.Message):
    user_id = message.from_user.id
    await check_user(message.from_user.id, message.from_user.username)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = db_data.users.find_one({'user_id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='üé≥')
        game_cfg = cfg_games.games.find_one({'name': '–±–æ—É–ª–∏–Ω–≥'})
        if amount_score.dice.value == 6:
            await win(message, rate_money, amount_money, game_cfg['first'], user_id)
        elif amount_score.dice.value == 5:
            await win(message, rate_money, amount_money, game_cfg['second'], user_id)
        else:
            await lose(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - int(amount_money)
        await message.reply(
            '–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{await num_triadi(enough_money)} $\n' + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{await num_triadi(amount_money)} $',
            parse_mode='HTML')

# –°–ª–æ—Ç
@router.message(F.text,IsSlot())
async def slot(message: types.Message):
    user_id = message.from_user.id
    await check_user(message.from_user.id, message.from_user.username)

    text = message.text.capitalize().split()
    value = text[1].split('–∫')
    money_num = value.pop(0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (—Ü–∏—Ñ—Ä—ã –ø–µ—Ä–¥ –ö)
    amount_k = len(value)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö (1–∫ == 1000)
    rate_money = int(money_num) * 1000 ** amount_k  # –°—Ç–∞–≤–∫–∞
    user_info = db_data.users.find_one({'user_id': user_id})
    amount_money = user_info['cash']
    if rate_money <= amount_money:
        amount_score = await bot.send_dice(message.chat.id, emoji='üé∞')
        game_cfg = cfg_games.games.find_one({'name': '—Å–ª–æ—Ç'})
        if amount_score.dice.value == 64:
            await win_slot(message, rate_money, amount_money, game_cfg['first'], user_id)
        elif amount_score.dice.value in (1, 22, 43):
            await win_slot(message, rate_money, amount_money, game_cfg['second'], user_id)
        elif amount_score.dice.value in (16, 32, 48):
            await win_slot(message, rate_money, amount_money, game_cfg['third'], user_id)
        else:
            await lose_slot(message, amount_money, rate_money, user_id)
    else:
        enough_money = rate_money - amount_money
        await message.reply(
            '–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: ' + f'{await num_triadi(enough_money)} $\n' + '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + f'{await num_triadi(amount_money)} $',
            parse_mode='HTML')


# —Ä–∞–∑–±–∏—Ç–∏–µ –Ω–∞ —Ç—Ä–∏–∞–¥—ã
async def num_triadi(num):
    return "{:,}".format(num).replace(",", " ")

